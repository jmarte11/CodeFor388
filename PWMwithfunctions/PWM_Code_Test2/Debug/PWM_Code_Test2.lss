
PWM_Code_Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000001f2  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800148  00800148  000002ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ce  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c8  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076a  00000000  00000000  000024a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d1  00000000  00000000  00002d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c60  00000000  00000000  00003365  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003fc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 ef       	ldi	r30, 0xF2	; 242
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 34       	cpi	r26, 0x48	; 72
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e4       	ldi	r26, 0x48	; 72
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 35       	cpi	r26, 0x58	; 88
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  ea:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <position5>:

void position5()
{
	// position 16
	//servo 2
	OCR4A = positions_1[18];
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	84 a1       	ldd	r24, Z+36	; 0x24
  f8:	95 a1       	ldd	r25, Z+37	; 0x25
  fa:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
  fe:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	89 e6       	ldi	r24, 0x69	; 105
 106:	98 e1       	ldi	r25, 0x18	; 24
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <position5+0x16>
 110:	00 c0       	rjmp	.+0      	; 0x112 <position5+0x20>
 112:	00 00       	nop
	_delay_ms(500);
	// servo 3
	OCR1B = positions_1[8];
 114:	80 89       	ldd	r24, Z+16	; 0x10
 116:	91 89       	ldd	r25, Z+17	; 0x11
 118:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 11c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	89 e6       	ldi	r24, 0x69	; 105
 124:	98 e1       	ldi	r25, 0x18	; 24
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <position5+0x34>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <position5+0x3e>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <main>:
uint16_t positions_1[NUM_POS] = {1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,
3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500};

int main(void)
{
	DDRD = 0xff;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0f;
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	84 b9       	out	0x04, r24	; 4
		
	*/	
	//Servo 1
	
	//DDRD |= (1 << 0);
	TCCR3A |= (1 << COM3A1 | (0b10) << WGM30);
 13c:	e0 e9       	ldi	r30, 0x90	; 144
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 68       	ori	r24, 0x82	; 130
 144:	80 83       	st	Z, r24
	TCCR3B |= ((0b11) << WGM32 | (0b010) <<CS30 | 1 << ICNC3);
 146:	e1 e9       	ldi	r30, 0x91	; 145
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8a 69       	ori	r24, 0x9A	; 154
 14e:	80 83       	st	Z, r24
	OCR3A |= 0000;
 150:	e8 e9       	ldi	r30, 0x98	; 152
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	91 83       	std	Z+1, r25	; 0x01
 15a:	80 83       	st	Z, r24
	ICR3 = 50000;
 15c:	80 e5       	ldi	r24, 0x50	; 80
 15e:	93 ec       	ldi	r25, 0xC3	; 195
 160:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f8097>
 164:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f8096>
	
	//Servo 4
	
	//DDRB |= (1 << 0b00000001);
	TCCR1A |= (1 << COM1A1 | (0b10) << WGM10);
 168:	a0 e8       	ldi	r26, 0x80	; 128
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	2c 91       	ld	r18, X
 16e:	22 68       	ori	r18, 0x82	; 130
 170:	2c 93       	st	X, r18
	TCCR1B |= ((0b11) << WGM12 | (0b010) <<CS10 | 1 << ICNC1);
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	20 81       	ld	r18, Z
 178:	2a 69       	ori	r18, 0x9A	; 154
 17a:	20 83       	st	Z, r18
	OCR1A |= 50000;
 17c:	c8 e8       	ldi	r28, 0x88	; 136
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	28 81       	ld	r18, Y
 182:	39 81       	ldd	r19, Y+1	; 0x01
 184:	20 65       	ori	r18, 0x50	; 80
 186:	33 6c       	ori	r19, 0xC3	; 195
 188:	39 83       	std	Y+1, r19	; 0x01
 18a:	28 83       	st	Y, r18
	ICR1 = 0000;
 18c:	c6 e8       	ldi	r28, 0x86	; 134
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	19 82       	std	Y+1, r1	; 0x01
 192:	18 82       	st	Y, r1
	
	//Servo 3
	
	//DDRB |= (1 << 0b00000010);
	TCCR1A |= (1 << COM1B1 | (0b10) << WGM10);
 194:	2c 91       	ld	r18, X
 196:	22 62       	ori	r18, 0x22	; 34
 198:	2c 93       	st	X, r18
	TCCR1B |= ((0b11) << WGM12 | (0b010) <<CS10 |  1 << ICNC1);
 19a:	20 81       	ld	r18, Z
 19c:	2a 69       	ori	r18, 0x9A	; 154
 19e:	20 83       	st	Z, r18
	OCR1B |= 0000;
 1a0:	ea e8       	ldi	r30, 0x8A	; 138
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	20 81       	ld	r18, Z
 1a6:	31 81       	ldd	r19, Z+1	; 0x01
 1a8:	31 83       	std	Z+1, r19	; 0x01
 1aa:	20 83       	st	Z, r18
	ICR1 = 50000;
 1ac:	99 83       	std	Y+1, r25	; 0x01
 1ae:	88 83       	st	Y, r24
	
	//Servo 2
	//DDRD |= (1 << 0b00000001);
	TCCR4A |= (1 << COM4A1 | (0b10) << WGM40);
 1b0:	e0 ea       	ldi	r30, 0xA0	; 160
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	20 81       	ld	r18, Z
 1b6:	22 68       	ori	r18, 0x82	; 130
 1b8:	20 83       	st	Z, r18
	TCCR4B |= ((0b11) << WGM42 | (0b010) << CS40 |  1 << ICNC4);
 1ba:	e1 ea       	ldi	r30, 0xA1	; 161
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	20 81       	ld	r18, Z
 1c0:	2a 69       	ori	r18, 0x9A	; 154
 1c2:	20 83       	st	Z, r18
	OCR4A |= 0000;
 1c4:	e8 ea       	ldi	r30, 0xA8	; 168
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	20 81       	ld	r18, Z
 1ca:	31 81       	ldd	r19, Z+1	; 0x01
 1cc:	31 83       	std	Z+1, r19	; 0x01
 1ce:	20 83       	st	Z, r18
	ICR4 = 50000;
 1d0:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 1d4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
	
	
	
	
	/* Replace with your application code */
	i=0;
 1d8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <i+0x1>
 1dc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <i>
	x = 0;
 1e0:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__data_end+0x1>
 1e4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
		//open_arm();
		//position1();
		//close_arm();
		//move_to_top();
		//half_way();
		position5();
 1e8:	0e 94 79 00 	call	0xf2	; 0xf2 <position5>
 1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <main+0xb4>

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
